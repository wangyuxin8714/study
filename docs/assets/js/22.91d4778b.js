(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{233:function(a,t,s){"use strict";s.r(t);var e=s(0),l=Object(e.a)({},function(){var a=this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git","aria-hidden":"true"}},[a._v("#")]),a._v(" GIT")]),a._v(" "),s("p",[a._v("Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。")]),a._v(" "),s("h2",{attrs:{id:"下载安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载安装","aria-hidden":"true"}},[a._v("#")]),a._v(" 下载安装")]),a._v(" "),s("ol",[s("li",[a._v("打开官网,找见下载地址\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/%E5%AE%89%E8%A3%85.png",alt:"git"}})]),a._v(" "),s("li",[a._v("打开安装包,傻瓜式安装(可以更改保存路径).")])]),a._v(" "),s("h2",{attrs:{id:"创建github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建github","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建gitHub")]),a._v(" "),s("ol",[s("li",[a._v("百度找到GitHub官方网站（https://github.com/ ）")]),a._v(" "),s("li",[a._v("点击Sign up注册GitHub账号")])]),a._v(" "),s("ul",[s("li",[a._v("第一步：填写账号邮箱密码，点击create an account 进入下一步，系统会向你填写的邮箱发送一封确认邮件，去登陆邮箱确认。\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/%E7%AC%AC%E4%B8%80%E6%AD%A5.png",alt:"git"}})]),a._v(" "),s("li",[a._v("第二步：保持默认，点击continue跳到下一步\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/%E7%AC%AC%E4%BA%8C%E6%AD%A5.png",alt:"git"}})]),a._v(" "),s("li",[a._v("第三步：是问卷可选填，然后点击提交按钮，账号就注册成功了！")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("创建应用")])]),a._v(" "),s("ul",[s("li",[a._v("点击右上角头像，选择settings\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/20180718211913934.png",alt:"git"}})]),a._v(" "),s("li",[a._v("选择Developer settings\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/20180718212436674.png",alt:"git"}})]),a._v(" "),s("li",[a._v("点击绿色按钮Register a new applications\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/2018071821260532.png",alt:"git"}})]),a._v(" "),s("li",[a._v("填写项目信息,完成后点击注册。\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/20180718213959678.png",alt:"git"}})]),a._v(" "),s("li",[a._v("完成项目注册，获取到Client ID 和 Client Secret\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/20180718214459863.png",alt:"git"}})])]),a._v(" "),s("h2",{attrs:{id:"配置环境-ssh秘钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置环境-ssh秘钥","aria-hidden":"true"}},[a._v("#")]),a._v(" 配置环境,ssh秘钥")]),a._v(" "),s("ol",[s("li",[a._v("在git文件夹中找见ssh-keygen.exe,复制路径")]),a._v(" "),s("li",[a._v("打开我的电脑属性--高级系统设置--环境变量--path中配置\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/%E7%8E%AF%E5%A2%83.png",alt:"git"}})]),a._v(" "),s("li",[a._v("在cmd中输入ssh-keygen,一顿回车,直到生成下图所示.\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5.png",alt:"git"}})]),a._v(" "),s("li",[a._v("然后输入cat id_rsa.pub,或输出秘钥,直接复制(注意:邮箱不用复制)\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/%E7%A7%98%E9%92%A5.png",alt:"git"}})]),a._v(" "),s("li",[a._v("然后登陆gitHub,点自己头像 -- settings -- SSH and GPG keys -- New SSH key,然后粘贴在key里,title随便写.\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/%E6%B7%BB%E5%8A%A0.png",alt:"git"}})]),a._v(" "),s("li",[a._v("配置完成\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/wangyuxin8714/ico/master/gitPicture/%E6%B7%BB%E5%8A%A0%E6%88%90%E5%8A%9F.png",alt:"git"}})])]),a._v(" "),s("p",[a._v("这样git和gitHub仓库就创建好了,我们可以在这里保存管理自己的代码.")]),a._v(" "),s("h2",{attrs:{id:"git命令行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git命令行","aria-hidden":"true"}},[a._v("#")]),a._v(" git命令行")]),a._v(" "),s("h3",{attrs:{id:"一、新建代码库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、新建代码库","aria-hidden":"true"}},[a._v("#")]),a._v(" 一、新建代码库")]),a._v(" "),s("ul",[s("li",[a._v("在当前目录新建一个Git代码库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git init\n")])])]),s("ul",[s("li",[a._v("新建一个目录，将其初始化为Git代码库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git init [project-name]\n")])])]),s("ul",[s("li",[a._v("下载一个项目和它的整个代码历史")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git clone [url]\n")])])]),s("h3",{attrs:{id:"二、配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、配置","aria-hidden":"true"}},[a._v("#")]),a._v(" 二、配置")]),a._v(" "),s("p",[a._v("Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。")]),a._v(" "),s("ul",[s("li",[a._v("显示当前的Git配置")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git config --list\n")])])]),s("ul",[s("li",[a._v("编辑Git配置文件")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git config -e [--global]\n")])])]),s("ul",[s("li",[a._v("设置提交代码时的用户信息")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n')])])]),s("h3",{attrs:{id:"三、增加-删除文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、增加-删除文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 三、增加/删除文件")]),a._v(" "),s("ul",[s("li",[a._v("添加指定文件到暂存区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git add [file1] [file2] ...\n")])])]),s("ul",[s("li",[a._v("添加指定目录到暂存区，包括子目录")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git add [dir]\n")])])]),s("ul",[s("li",[a._v("添加当前目录的所有文件到暂存区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git add .\n")])])]),s("ul",[s("li",[a._v("添加每个变化前，都会要求确认")]),a._v(" "),s("li",[a._v("对于同一个文件的多处变化，可以实现分次提交")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git add -p\n")])])]),s("ul",[s("li",[a._v("删除工作区文件，并且将这次删除放入暂存区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git rm [file1] [file2] ...\n")])])]),s("ul",[s("li",[a._v("停止追踪指定文件，但该文件会保留在工作区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git rm --cached [file]\n")])])]),s("ul",[s("li",[a._v("改名文件，并且将这个改名放入暂存区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git mv [file-original] [file-renamed]\n")])])]),s("h3",{attrs:{id:"四、代码提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、代码提交","aria-hidden":"true"}},[a._v("#")]),a._v(" 四、代码提交")]),a._v(" "),s("ul",[s("li",[a._v("提交暂存区到仓库区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git commit -m [message]\n")])])]),s("ul",[s("li",[a._v("提交暂存区的指定文件到仓库区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git commit [file1] [file2] ... -m [message]\n")])])]),s("ul",[s("li",[a._v("提交工作区自上次commit之后的变化，直接到仓库区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git commit -a\n")])])]),s("ul",[s("li",[a._v("提交时显示所有diff信息")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git commit -v\n")])])]),s("ul",[s("li",[a._v("使用一次新的commit，替代上一次提交")]),a._v(" "),s("li",[a._v("如果代码没有任何新变化，则用来改写上一次commit的提交信息")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git commit --amend -m [message]\n")])])]),s("ul",[s("li",[a._v("重做上一次commit，并包括指定文件的新变化")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git commit --amend [file1] [file2] ...\n")])])]),s("h3",{attrs:{id:"五、分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、分支","aria-hidden":"true"}},[a._v("#")]),a._v(" 五、分支")]),a._v(" "),s("ul",[s("li",[a._v("列出所有本地分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git branch\n")])])]),s("ul",[s("li",[a._v("列出所有远程分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git branch -r\n")])])]),s("ul",[s("li",[a._v("列出所有本地分支和远程分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git branch -a\n")])])]),s("ul",[s("li",[a._v("新建一个分支，但依然停留在当前分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git branch [branch-name]\n")])])]),s("ul",[s("li",[a._v("新建一个分支，并切换到该分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git checkout -b [branch]\n")])])]),s("ul",[s("li",[a._v("新建一个分支，指向指定commit")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git branch [branch] [commit]\n")])])]),s("ul",[s("li",[a._v("新建一个分支，与指定的远程分支建立追踪关系")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git branch --track [branch] [remote-branch]\n")])])]),s("ul",[s("li",[a._v("切换到指定分支，并更新工作区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git checkout [branch-name]\n")])])]),s("ul",[s("li",[a._v("切换到上一个分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git checkout -\n")])])]),s("ul",[s("li",[a._v("建立追踪关系，在现有分支与指定的远程分支之间")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git branch --set-upstream [branch] [remote-branch]\n")])])]),s("ul",[s("li",[a._v("合并指定分支到当前分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git merge [branch]\n")])])]),s("ul",[s("li",[a._v("选择一个commit，合并进当前分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git cherry-pick [commit]\n")])])]),s("ul",[s("li",[a._v("删除分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git branch -d [branch-name]\n")])])]),s("ul",[s("li",[a._v("删除远程分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n")])])]),s("h3",{attrs:{id:"六、标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 六、标签")]),a._v(" "),s("ul",[s("li",[a._v("列出所有tag")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git tag\n")])])]),s("ul",[s("li",[a._v("新建一个tag在当前commit")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git tag [tag]\n")])])]),s("ul",[s("li",[a._v("新建一个tag在指定commit")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git tag [tag] [commit]\n")])])]),s("ul",[s("li",[a._v("删除本地tag")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git tag -d [tag]\n")])])]),s("ul",[s("li",[a._v("删除远程tag")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git push origin :refs/tags/[tagName]\n")])])]),s("ul",[s("li",[a._v("查看tag信息")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git show [tag]\n")])])]),s("ul",[s("li",[a._v("提交指定tag")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git push [remote] [tag]\n")])])]),s("ul",[s("li",[a._v("提交所有tag")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git push [remote] --tags\n")])])]),s("ul",[s("li",[a._v("新建一个分支，指向某个tag")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git checkout -b [branch] [tag]\n")])])]),s("h3",{attrs:{id:"七、查看信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、查看信息","aria-hidden":"true"}},[a._v("#")]),a._v(" 七、查看信息")]),a._v(" "),s("ul",[s("li",[a._v("显示有变更的文件")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git status\n")])])]),s("ul",[s("li",[a._v("显示当前分支的版本历史")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git log\n")])])]),s("ul",[s("li",[a._v("显示commit历史，以及每次commit发生变更的文件")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git log --stat\n")])])]),s("ul",[s("li",[a._v("搜索提交历史，根据关键词")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git log -S [keyword]\n")])])]),s("ul",[s("li",[a._v("显示某个commit之后的所有变动，每个commit占据一行")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git log [tag] HEAD --pretty=format:%s\n")])])]),s("ul",[s("li",[a._v('显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件')])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git log [tag] HEAD --grep feature\n")])])]),s("ul",[s("li",[a._v("显示某个文件的版本历史，包括文件改名")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git log --follow [file]\n$ git whatchanged [file]\n")])])]),s("ul",[s("li",[a._v("显示指定文件相关的每一次diff")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git log -p [file]\n")])])]),s("ul",[s("li",[a._v("显示过去5次提交")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git log -5 --pretty --oneline\n")])])]),s("ul",[s("li",[a._v("显示所有提交过的用户，按提交次数排序")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git shortlog -sn\n")])])]),s("ul",[s("li",[a._v("显示指定文件是什么人在什么时间修改过")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git blame [file]\n")])])]),s("ul",[s("li",[a._v("显示暂存区和工作区的差异")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git diff\n")])])]),s("ul",[s("li",[a._v("显示暂存区和上一个commit的差异")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git diff --cached [file]\n")])])]),s("ul",[s("li",[a._v("显示工作区与当前分支最新commit之间的差异")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git diff HEAD\n")])])]),s("ul",[s("li",[a._v("显示两次提交之间的差异")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git diff [first-branch]...[second-branch]\n")])])]),s("ul",[s("li",[a._v("显示今天你写了多少行代码")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$ git diff --shortstat "@{0 day ago}"\n')])])]),s("ul",[s("li",[a._v("显示某次提交的元数据和内容变化")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git show [commit]\n")])])]),s("ul",[s("li",[a._v("显示某次提交发生变化的文件")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git show --name-only [commit]\n")])])]),s("ul",[s("li",[a._v("显示某次提交时，某个文件的内容")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git show [commit]:[filename]\n")])])]),s("ul",[s("li",[a._v("显示当前分支的最近几次提交")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git reflog\n")])])]),s("h3",{attrs:{id:"八、远程同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、远程同步","aria-hidden":"true"}},[a._v("#")]),a._v(" 八、远程同步")]),a._v(" "),s("ul",[s("li",[a._v("下载远程仓库的所有变动")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git fetch [remote]\n")])])]),s("ul",[s("li",[a._v("显示所有远程仓库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git remote -v\n")])])]),s("ul",[s("li",[a._v("显示某个远程仓库的信息")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git remote show [remote]\n")])])]),s("ul",[s("li",[a._v("增加一个新的远程仓库，并命名")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git remote add [shortname] [url]\n")])])]),s("ul",[s("li",[a._v("取回远程仓库的变化，并与本地分支合并")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git pull [remote] [branch]\n")])])]),s("ul",[s("li",[a._v("上传本地指定分支到远程仓库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git push [remote] [branch]\n")])])]),s("ul",[s("li",[a._v("强行推送当前分支到远程仓库，即使有冲突")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git push [remote] --force\n")])])]),s("ul",[s("li",[a._v("推送所有分支到远程仓库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git push [remote] --all\n")])])]),s("h3",{attrs:{id:"九、撤销"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九、撤销","aria-hidden":"true"}},[a._v("#")]),a._v(" 九、撤销")]),a._v(" "),s("ul",[s("li",[a._v("恢复暂存区的指定文件到工作区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git checkout [file]\n")])])]),s("ul",[s("li",[a._v("恢复某个commit的指定文件到暂存区和工作区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git checkout [commit] [file]\n")])])]),s("ul",[s("li",[a._v("恢复暂存区的所有文件到工作区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git checkout .\n")])])]),s("ul",[s("li",[a._v("重置暂存区的指定文件，与上一次commit保持一致，但工作区不变")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git reset [file]\n")])])]),s("ul",[s("li",[a._v("重置暂存区与工作区，与上一次commit保持一致")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git reset --hard\n")])])]),s("ul",[s("li",[a._v("重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git reset [commit]\n")])])]),s("ul",[s("li",[a._v("重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git reset --hard [commit]\n")])])]),s("ul",[s("li",[a._v("重置当前HEAD为指定commit，但保持暂存区和工作区不变")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git reset --keep [commit]\n")])])]),s("ul",[s("li",[a._v("新建一个commit，用来撤销指定commit")]),a._v(" "),s("li",[a._v("后者的所有变化都将被前者抵消，并且应用到当前分支")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git revert [commit]\n")])])]),s("ul",[s("li",[a._v("暂时将未提交的变化移除，稍后再移入")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git stash\n$ git stash pop\n")])])]),s("h3",{attrs:{id:"十、其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十、其他","aria-hidden":"true"}},[a._v("#")]),a._v(" 十、其他")]),a._v(" "),s("ul",[s("li",[a._v("生成一个可供发布的压缩包")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git archive\n")])])]),s("h2",{attrs:{id:"使用git时候遇到的坑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用git时候遇到的坑","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用git时候遇到的坑")]),a._v(" "),s("ol",[s("li",[a._v("在使用git add <文件名>命令的时候，最好紧跟着git commit -m '操作描述'。")])]),a._v(" "),s("p",[a._v("坑：如果你上一次操作的时候，只将一些文件add到了暂存区，但是并没有commit到本地版本库中，那么你这次push的时候，会将上一次残留在暂存区的文件，一起push到远程库中；而上次操作中已经commit到本地版本库的文件，是不会影响这次的push的.")]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("git reset <文件名> 撤销已经add到暂存区，但是还没有commit的文件。")])]),a._v(" "),s("p",[a._v("如果你往暂存区中add了一些错误的文件，但是还没有commit到本地版本库。你可以使用上述命令撤销add。")]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("git checkout -- <文件名>")])]),a._v(" "),s("p",[a._v("误删工作区的文件，用本地版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。")]),a._v(" "),s("p",[a._v("坑：会清除工作区中未添加到暂存区的改动 ，使用的时候要注意。")]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[a._v("git rm -r --cache <文件名> 删除暂存区的文件（不改变工作区的该文件）")])]),a._v(" "),s("p",[a._v("坑： 删除暂存区的该文件之前，你要确定之前在暂存区中的文件，你确实是不需要了，能被删除。因为该命令实际上的意思是，停止追踪某个文件（但是并不会改变工作区中的该文件），这样的话这个文件就没有追踪记录了。假如你在本地工作区误删了该文件（但是该文件你之前已经commit到了本地版本库中），此时你想要恢复该文件到本地的工作区，是不能用git checkout -- <文件名>恢复过来的！！！")]),a._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[a._v("git status 查看暂存区和工作区文件的状态")])]),a._v(" "),s("p",[a._v("git status只能看到”add到暂存区但是还没有commit到本地版本库的文件”和”还没有被add到暂存区的文件（工作区的文件）”的状态，已经commit到本地版本库的文件，是看不到的。看项目历史的信息要使用git log。")]),a._v(" "),s("p",[a._v("“add到暂存区但是还没有commit到本地版本库的文件”的状态是“unstaged”；\n“还没有被add到暂存区的文件”的状态是“untracked”；")])])}],!1,null,null,null);t.default=l.exports}}]);